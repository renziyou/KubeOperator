// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xc1\x72\xa3\xcc\x11\xbe\xf3\x14\x6d\x5c\x7b\xdb\xfc\x95\xb3\x6e\x2c\xc2\x36\x59\x04\x14\x20\xff\x71\x2e\xd4\x08\x5a\xd2\xc4\x68\x86\x9a\x19\xd6\xf1\x7f\xcb\x7b\xe5\x9d\xf2\x0a\xa9\x1e\x46\x08\xc9\x72\x56\x5b\xff\x5e\x56\x54\x4d\x77\x7f\xd3\xdd\xdf\xd7\x3d\xbe\x6f\xe4\xe1\x20\x85\x97\x06\xab\xa8\x8e\xfe\x1e\x97\x55\xb9\x00\x3f\x65\x07\x04\xd6\x29\x64\xed\x3b\xe0\xbf\xb8\x36\xda\xf7\xe2\xbc\x4e\xb3\xea\x74\x28\xef\x90\x69\x84\x2d\xef\x3a\xe0\x02\xcc\x1e\xa1\x93\x0d\xeb\x20\xce\x41\x8e\xdf\xfa\x5d\x1b\x3c\x80\x46\x63\xb8\xd8\x41\xcf\x76\xe8\x7b\xde\x7d\xd3\x0d\xda\xa0\xf2\xc2\x64\x5d\x56\x51\x51\x2f\xa3\x24\xaa\xa2\xfa\x21\x88\x93\x68\xb9\x00\xbf\x61\x02\x84\x34\xd0\x62\x87\x06\xc1\x1d\xa7\x20\xcd\xa0\x14\x0a\x03\xda\x30\x83\xfe\xe4\x20\x2e\x2d\xb4\x62\x9d\xa6\x71\xfa\xb8\x00\xbf\xda\xcf\xcc\xb4\x75\xa6\x06\x21\xb8\xd8\x7d\x30\x4a\xb2\x30\x48\x16\xe0\xc7\x87\x5e\x2a\x33\x59\x35\x4c\x90\xd5\x06\x61\xe8\x77\x8a\xb5\xd8\x5a\xe4\x0a\x5b\x14\x86\xb3\xce\x3b\x03\x5d\x17\x51\x99\xad\x8b\x30\x5a\x80\xff\xc0\x78\x87\x2d\x18\xe9\xf0\xdf\x41\xb5\x47\x85\x84\x83\x09\x60\x5a\xcb\x86\x33\x83\x2d\xec\xa5\x36\x30\x88\x16\x15\x98\x3d\xd7\xf0\x8a\xef\xfe\x27\x6e\xeb\x7f\x64\xe9\x2f\xf9\xfe\x43\x0a\xbc\xe2\xfb\x21\x58\x27\x55\x1d\x16\xd1\x32\x4a\xab\x38\x48\xea\x30\x48\x6d\x16\xc6\xb0\x0b\xf0\x97\xb8\x65\x43\x67\xe0\x74\xd3\x59\x2a\xc6\xa0\xad\x3f\xb6\x4b\xf8\x14\x85\xdf\x4f\x55\xb3\x39\x3f\x59\x09\xea\xa1\x93\xa9\x6d\x07\xdb\x56\xda\xfe\x1e\x34\x2a\x7b\xc6\xf7\x3c\xef\x9e\x52\xe1\x3d\x65\x65\x55\x07\x49\x11\x05\xcb\x97\x53\x9b\x3d\x51\x96\x2e\x7b\xd1\x65\xc9\x5a\x4c\x00\xae\x26\x67\xcc\x32\xe5\xc7\xb9\x98\x25\xe9\x8d\x9b\xbd\x05\xe3\x8a\x7e\xcd\x6f\xfd\xed\xa5\xce\x8b\xec\x6f\x51\x58\xfd\xa9\x10\xbd\x92\xff\xc4\xc6\xf8\x5e\xf9\x52\x56\xd1\xaa\x76\x6c\x7a\xc8\xd6\xe9\xf2\x27\x64\xda\x72\xa5\xcd\x7f\xff\xf3\x6f\xdf\x4b\x33\xb2\x0b\x9e\x83\x38\x09\xbe\x25\x54\xae\x54\x42\xdc\x03\xfb\xc1\x78\xc7\x36\x1d\xfa\x5e\x5c\x8e\x1d\x6d\xef\x30\xe3\x12\x1f\xdb\x7b\x74\x4a\x80\xfd\x31\xdf\xf1\x2a\xcf\x8a\xaa\x8e\x8a\x22\x2b\xea\x74\x9d\x24\xa3\xd3\x96\x19\x46\xd7\x74\x66\x6f\x4c\xc3\x56\x0e\xa2\xbd\x03\x87\xb4\xd9\x63\xf3\x6a\x71\xba\x23\x5b\xde\xe1\xdd\xb9\x53\x72\x57\x3f\x07\xc9\x9a\x90\x46\x87\xde\xbc\x8f\x7e\xa5\x80\x8e\x0b\x84\x2f\xfa\xfc\xfc\xef\x45\x96\x3e\xd6\x0f\x59\xb1\x0a\x08\x7a\x2c\x1a\xa9\x14\x36\x06\xc6\x00\x52\x1d\x98\xf9\xd4\x78\xd6\xd4\xf3\xc4\x86\xb3\x8e\x94\x66\xbc\xc4\xa7\x3e\x5c\xc9\xd3\xf5\x6a\x01\x7e\x00\x46\x1a\xd6\x81\xdc\xc2\x17\x0d\x4a\xbe\x69\xfa\x69\x2f\xc0\x14\x02\xdb\x08\x02\xd4\x7d\x05\xfd\xca\xfb\xab\x7e\xca\xe0\xf9\x9c\xb4\x9a\xfd\x70\xdd\xf2\x45\x7f\x05\x85\x4c\x4b\xb1\x20\x10\x9e\x77\x4f\x84\xf0\xf2\xa0\x2c\x7f\xcf\x8a\xa5\xbd\xc2\x2a\xa8\xc2\x27\x47\xac\x9e\x69\xfd\x26\x55\x4b\x6d\xc6\x8f\x79\xf1\xbd\xac\x88\x1f\xe3\xd4\x5d\x79\x7e\x5e\x2a\xbe\xe3\x82\x75\x9f\x19\xae\xcb\x93\x02\x06\x61\x15\x5b\xa0\xd5\x91\x97\x4e\x32\x51\x50\x4f\xcd\x6a\x2e\x85\x61\x8d\xb1\x55\x67\xed\x81\x0b\xae\x8d\x62\x46\xaa\x3b\xe7\x70\x9e\xf8\x54\x82\x1e\x9a\xbd\x75\x68\x9b\x37\x58\xae\xe2\xf4\xa3\xe0\x50\xd0\xd6\x89\x8e\x75\x3a\x42\xf8\x20\x3a\x77\xe7\xa0\x8b\x28\x09\xaa\x68\x39\xe3\xe6\x9a\xcc\xf6\x8c\xa0\xcf\x19\xe8\x88\x67\x21\x24\xcb\x20\x9f\x10\xac\xf3\x65\x30\x21\xe8\x5a\xd6\x5f\x06\xc6\x96\x8f\x71\x9f\xa3\x22\x7e\x78\xa9\xc3\x6c\x39\x1b\x52\xcf\xa8\xf8\x96\x37\xcc\x70\x29\xa0\x91\x2d\x02\x2a\x25\x95\xef\x45\xab\x20\x4e\xea\x65\x5c\x3a\x8a\xae\x18\xef\x8e\x23\x50\xdb\xd6\x69\xb9\xbe\x31\xb1\x47\x6f\xf3\xf2\x46\x07\x72\x78\x60\xa6\xd9\xc3\xd6\xb6\xd6\xa8\x0d\x24\xc9\x53\xff\x94\xf4\x35\x61\xa5\xd4\xfc\x1f\x3d\x3e\xf6\xc8\xa5\x13\x2b\x0a\x0b\xf0\xdf\x94\x14\xbb\x93\x62\x83\x54\x33\x93\x11\xa0\x95\xeb\x09\xdc\xa5\x5c\x7b\xf7\x0a\x77\x5c\x8a\xa3\xbe\x16\xd1\x63\x9c\xa5\xb7\xce\x4e\x18\x8d\x7f\xa6\xb0\x34\xf2\x28\x14\xfd\x7f\x0c\x44\x63\xf3\xe6\x30\x76\x66\xfe\x4c\xc6\x3b\x26\xce\x57\x88\x51\x32\xc3\x31\xb1\x3b\x34\xf3\x81\x72\x45\x2d\x1b\x29\xb6\x7c\x37\x28\xdb\x37\xb6\x70\xf1\x2a\x78\x8c\x3e\x77\xc5\x0f\x6c\x87\xb7\x39\xca\xeb\xf2\x29\x2b\x46\xe9\xd4\xc3\x76\xcb\x1b\x4e\xcb\x52\xdc\x53\x5a\x64\x8f\x42\x1b\xd6\xbc\x7a\x8f\x51\x75\xac\xc0\xb1\xc2\xa9\x3c\x26\xd9\x0a\x24\x9d\x77\xbc\x59\xe1\x61\x83\x6a\xa2\x5e\xb0\x5c\xce\xa9\xb6\x41\x14\xc0\x5a\xb7\x1d\x39\x93\x69\xcf\x70\xdc\xfc\x7c\xc9\x70\x06\xd7\x36\x8c\xa3\xed\x53\x50\xd6\x2e\xdd\x34\x26\x9d\xc1\xac\x34\x53\xaa\xc3\x2b\x8a\xe1\xdd\x0b\xd9\xa2\x97\x12\x73\x8f\x9b\x85\xdb\x12\xeb\x2a\x28\xbf\x93\xcc\xb7\x2d\xd0\x21\xea\x6a\xb7\x70\xda\xcf\x63\x17\xb8\xbd\xf1\x6b\x3f\x16\xe0\x8d\x71\x03\xdc\x40\x2b\x05\xfe\x46\x01\x36\xac\x79\x1d\xfa\xa0\x69\xe4\x20\x8c\x97\x07\x45\xb0\xaa\xa3\x55\x5e\xbd\x5c\x96\xa1\x67\x8a\x1d\xd0\xa0\xd2\x34\xc8\xab\xba\x5c\xe7\xf9\x58\xad\xb5\xd0\x43\x4f\x33\x8e\x7a\xf2\xbd\xa7\xc5\xf6\x7c\xb5\x3a\xd3\x9a\x91\xf3\xd3\xae\xf2\x2d\x08\xbf\xaf\xf3\x3a\x08\xc3\x6c\x9d\xfe\xca\xd6\x72\x06\xfc\xe6\xf5\xc5\xbb\x27\x0a\x5c\xac\xa9\x37\x44\x23\xab\x5f\x08\xe2\xaa\xfa\xcd\x62\xf4\xdc\x1d\x1f\xe2\x24\x1a\xd5\xdf\x51\xc5\x91\xc2\x95\xcd\x4c\x97\xb2\xcb\x08\x6c\x70\x2b\x15\x82\x7e\xe3\xa6\xd9\xd3\xfb\x63\x76\x80\x8d\xd7\x3e\xa3\xf2\x18\xe5\xe3\xeb\x61\x83\x64\x4c\x86\xd8\xc2\xd0\x5b\xae\xcd\xcc\x8a\xa8\xac\xb2\x22\xfa\x68\xa7\x50\x1b\xa9\xb8\xd8\x59\x8b\x89\x1e\x05\x6a\x39\xa8\x06\x3f\xe6\x70\x76\xcd\x9f\x5e\xee\xb4\x14\x5e\xdf\x59\x4f\x9c\x99\x36\xd4\x63\xea\x37\xd8\x49\x1a\x45\x46\x9e\x6b\x55\x45\x0f\x05\xd9\xa3\x72\x33\x6d\xe2\x53\x8f\x8a\x96\x2f\xc7\x28\x1a\x95\xe3\x24\x9d\xe6\xf1\x58\x8d\xf2\x5d\x34\x7b\x25\x05\xff\x83\xf2\xa4\x51\x8d\xd3\xee\xaf\x6e\xee\x26\xd9\x63\x9c\x5e\xda\xac\xe7\xeb\x06\x4d\x8b\x3b\x77\xfa\x34\x3f\xab\xd3\x43\xb2\x57\x72\xcf\x37\xdc\x68\xa0\x33\x2e\xc6\x56\xc9\x03\x74\x72\xb7\xa3\x2a\x71\xf1\xdb\x2d\xdb\x8a\x77\xdf\x70\xed\x85\x71\x69\x55\xe0\x52\x1a\x68\x6d\xe6\x1a\x0c\xd3\xaf\x97\x32\x40\xa6\x3f\x0e\xa1\xd5\x5e\xef\x79\x55\x87\x59\xfa\x10\x3f\x9e\x5e\x2b\xe1\x5c\x95\x3f\xcc\xc1\x93\xc1\xe5\x93\xb7\xba\x54\xf4\xcf\xaa\xd5\x62\xdf\xc9\xf7\x83\x15\x94\x8e\x89\x9b\xab\xc6\x7b\x9a\x0f\x13\x4e\x8a\x87\xc2\xa0\xc2\x96\x9e\x18\x1a\x77\xd6\x25\x41\xe8\x78\x63\xf4\x89\x94\x16\x3b\xa5\xf6\x74\xec\x2b\xf4\xe7\xcf\x15\xb6\x63\x5c\x4c\x7f\x21\x98\xbf\x4f\xe2\x9c\x96\x67\x42\xd8\x34\x43\xcf\xb1\x05\x26\xda\x19\x48\x85\xd6\x53\x3b\x42\xfc\x4b\x2f\x65\x47\x6e\xf2\x2c\x4b\xae\xe6\x28\xce\x81\xce\xcc\x86\xcf\x15\x1d\x99\x9e\x43\xe3\x48\x3f\x8f\x38\x4d\x18\xfa\xf7\xbf\x00\x00\x00\xff\xff\x88\x7d\xb6\x51\xff\x10\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 4351, mode: os.FileMode(420), modTime: time.Unix(1609921348, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\x4f\x57\xe2\x58\x16\xdf\xbf\x4f\xc1\x81\xd3\xbb\x99\x39\xb3\xae\x5d\x2a\x44\xcd\x54\x48\x72\x92\x60\x8f\xb3\xc9\xb1\x29\xa6\xc7\x69\x05\x8e\x7f\x66\x31\xab\xa6\x4a\x05\xec\x44\x9c\x6a\x75\x4a\xa5\x5b\xb0\xb4\xca\xd1\xe6\x8f\xda\x25\x08\xa8\x5f\x26\xef\x25\x59\xf9\x15\xe6\xbc\xf7\x92\x10\xa0\xe8\x76\x49\xb8\xbf\xfb\xff\xfe\xee\x7d\xb1\x54\x76\x69\x29\x9b\x01\x22\x93\xe0\x74\xee\xaf\xbc\xaa\xa9\x2f\x22\x51\xb8\x63\xda\x9f\x5a\xb0\x7d\x0d\xeb\xef\x61\xe5\x3c\x0a\x78\x59\x17\x25\x6d\x20\xe0\x34\xdb\xb0\x72\x6e\xdf\xf4\xec\xde\xb1\xd3\x78\xb0\xef\x1b\x6e\xed\xb3\xfb\xd3\x09\xac\x5d\xc2\xcd\x03\xfa\x9d\x97\xa3\x00\xc4\x52\x8b\x6b\x2b\xab\xe9\x65\xc0\x0a\x49\x55\xe3\x14\x3d\xce\x09\x9c\xc6\xe9\x53\x0c\x2f\x70\xf1\x17\x91\x28\xfa\x6f\x15\xdd\xec\xc1\x62\xd5\x3d\x38\x85\xf7\x3f\xc2\x92\x69\x6f\xdd\xa2\xef\xf3\xf6\xe1\xba\x7b\xb4\x69\x3f\x9c\x46\x03\x28\xaf\x12\x27\x94\xa4\x28\xf2\xe2\xf4\x8b\x48\x94\x0a\x58\x1d\x13\x56\xce\x9d\xc7\x1d\xa7\x66\x58\x9d\xfa\x53\x3f\x3f\x06\x11\x24\x96\x11\x70\x5c\xcd\x3e\xdc\x38\xa3\x30\xcf\xb0\x59\xb0\xbb\x9f\x88\xa3\xcb\xe9\xd7\xe9\xcc\xea\xc2\xfc\x22\x18\xf2\x51\x57\x38\x55\x4a\x2a\x2c\x87\xf1\xd4\xcd\xd3\x2b\xe7\xd7\xb3\xa7\x7e\xde\x69\x9e\xd9\x9f\xde\xbb\xef\xce\xac\xce\x0f\xa8\x52\x82\x1b\x37\x4e\x7e\xd7\xea\xf4\x50\xa5\x1b\x9d\xa0\x44\xff\x9b\x24\x3e\x57\x13\x2c\x37\xed\xdd\x73\x68\x10\x65\x53\x4c\x52\xd0\x74\x56\xe1\xe2\x9c\xa8\xf1\x8c\xa0\xb3\x8c\x48\x62\xa3\x76\x70\x36\x7a\xef\x9d\xc6\x29\x2c\xd4\x91\xd9\xb0\x3a\xa6\xf3\xf6\x9e\x1a\x21\x09\x21\xf5\x65\x67\x38\xf6\xd5\x20\xf5\xd4\x22\xad\x35\x05\x58\x9d\x6d\x7b\xf7\x1c\x15\xdb\xf8\xe3\x51\x07\xee\x18\x38\x33\xff\xc8\xae\xac\x82\x19\x49\xd5\x74\x46\x50\x38\x26\x3e\x37\xe8\x03\x1a\x6c\xa8\x51\xbc\xa8\x89\x74\x60\x68\x3c\xd8\x00\x67\xf7\xca\x34\x58\xbf\xd8\xe3\x0a\xf4\x97\x73\xba\xac\x48\x7f\xe1\x58\xed\xb9\xba\x6a\x77\xf6\x51\x83\xc4\xad\xce\xa9\x1a\x97\xd0\xbd\xfe\x9d\x92\x92\x62\xdc\x6b\xdf\x8d\x22\x6d\x56\x54\xf9\x05\x55\xba\xbc\x4c\xd3\x24\x61\x51\x66\x96\xe1\x05\xe6\xa5\x80\xb3\xca\xcb\x11\xe7\xf3\x3a\xea\xee\xe0\x0c\xdd\xde\x44\x01\xaf\xd2\x76\x22\x2e\x0e\x1a\x98\x74\x16\xd5\x15\xa5\xc9\xe2\x13\xb2\xa4\x68\x3a\xa7\x28\x92\xa2\x8b\x49\x01\x37\x20\xaa\x5c\xa0\xd2\x03\x2c\xb6\x60\xb9\x49\x21\xf6\xe1\x3a\xda\x6b\x21\xb3\x41\x82\x69\xa3\x0f\xdf\xa3\xe3\x33\x4f\xdb\x7e\xc1\xea\xdd\x12\xbf\xc2\x0a\xb1\x2a\x7d\x96\x11\x92\xd8\xbd\xaf\x56\x22\x4e\xcd\x40\x95\x92\xfd\xbf\x2e\xd5\x33\x2c\xfc\xb5\x22\x89\xd3\xfa\x94\xa4\x24\x18\x2d\x10\xb7\x2f\x9b\xb0\xfc\x01\x55\xfb\xb0\x5f\xb6\x3a\x26\xaa\x7f\xb0\x6b\x23\xb8\x50\xa3\x85\x13\xe7\x99\x2b\x3d\xe0\xa1\x2b\xb6\x60\x73\xd3\x7d\x77\x36\x8c\xf4\x8a\x26\x26\x13\xb8\x5a\x1b\x57\x11\x0f\x43\x9c\xa3\xd6\x60\xa7\xf3\xd4\x37\x9c\xf6\x8d\xf3\x58\xf8\x22\x58\x65\x66\xb9\xa0\xbb\xb0\x02\xeb\xf1\x27\xdc\x61\x5e\xd5\x0d\xb8\x7d\x0c\x8f\xaa\x4f\xfd\xc3\xaf\x56\xa2\x00\x80\xd8\xda\x4a\x7a\x19\xc8\x8c\xaa\x7e\x2d\x29\x71\xe2\x70\x82\xd1\xd8\x19\x32\xf1\x9b\x76\x35\xef\xee\x1e\x38\xcd\x66\x14\x48\x0a\x3f\xcd\x8b\x5e\x4c\x81\xc8\xf6\xf1\xb0\x54\x52\x1d\x30\x07\xc3\x6a\x3c\xf1\x85\xce\x05\xaa\x5c\xc0\x1d\x3c\x95\xb4\x5a\x4e\x7e\x17\x73\x5d\xa3\x66\xef\x6c\xc2\xff\xbc\x27\xa5\x22\xe8\x70\xce\x70\x83\xd4\x4f\x29\x9e\x48\x30\xf1\x04\x2f\x4e\x9a\xdf\xc8\xfc\xeb\xa5\x85\x4c\x84\x8a\xd3\xa9\x74\x4e\x2e\x43\x93\x1c\xf6\x4e\xe1\x04\x46\xe3\xe2\xa1\xf1\xf0\xdc\xbc\xae\x05\x2c\x42\x87\x21\x0a\x84\x38\x23\x07\x46\x93\x72\x9c\x21\x46\xf1\xd7\x21\x63\xd6\x63\x03\xed\xde\x11\x4b\xb3\x9c\xc2\x4f\xcd\xe9\xac\x14\x0f\xf1\xb5\x7b\x61\x38\xcd\x7c\x28\x5b\x5c\x82\xe1\x05\x3d\xce\xab\xde\xc0\xb8\x6f\x1a\x56\xef\x96\x2e\x05\xe7\xe4\xd2\xfe\x98\x9f\x94\x2e\x1f\x1b\x2e\x06\x45\x43\xe3\xce\xdd\x30\x83\x21\xf7\xe8\x2b\x28\xb0\x8a\x7f\x0d\x68\xcc\x67\xac\x80\xc3\x68\x39\x7d\x02\x1b\xc6\x92\x71\x0c\xa3\x50\x71\x7f\xb8\xfc\xd4\x29\x42\x71\xd4\x21\xbb\x71\x15\x62\x38\x00\x62\xcb\xe9\x6f\x17\xb2\x19\x9f\xaa\x14\x6e\x9a\x97\xc4\x67\x6d\x0b\x68\x74\xe1\xf1\x71\x98\xaa\x42\x1c\x0f\x62\xff\xce\x66\xd2\xbe\x56\xbc\x27\x9e\xa7\xd3\xd7\x30\xc4\x80\x6f\xcf\xed\xfb\x6b\xa7\x51\x83\xc5\x77\xc3\xdb\x90\xf2\x90\xb3\xdd\x86\xe5\x7d\x3a\xc4\x94\x79\xc3\xf4\xe3\x6e\x98\xf6\x3d\xe5\x4f\x3e\xc1\x4c\x73\x93\x80\x7b\x15\xf8\xb6\x3c\x09\x28\xeb\xea\x8c\xa4\xe0\x14\xf2\xb9\x88\x4f\x9e\x00\xc4\xb2\xb9\x74\x66\x65\x75\x3e\xf5\x1d\x98\xe6\x34\x3f\x79\x7e\x55\x06\xcc\x42\x32\x85\x93\x92\x5b\xce\xfe\x33\x9d\x5a\x4d\xa4\x97\xbe\x49\x2f\x07\xdd\xcf\xc4\x43\xa5\x27\x81\xa3\x76\x0f\x6e\x55\x43\x88\x60\x69\x7a\xd3\x31\x69\xe2\xe8\x80\x8c\x6d\x4c\x1f\x35\xc3\xa8\xba\x97\x40\x0c\x21\xc2\xe1\x95\xf5\xd4\xcf\x8f\x61\x41\x2c\x93\x7d\x9d\x06\x22\x9e\x1c\x7f\x67\x7a\x67\x8b\xae\x31\xea\x2b\xc2\x8c\xb7\x56\x6f\xdf\xd9\x7a\x63\xbf\xb9\x43\x7b\x2d\xb7\x50\x46\x3f\x9a\xd6\x7d\x05\xd3\x63\xe5\x1c\x95\x3e\x39\x35\xe3\x0f\x11\xa7\xd9\xb6\xeb\x25\xf8\xb0\x01\x1b\x6f\xad\xde\x2f\xf4\x33\x6c\x18\xa8\xb9\xf7\x27\x6c\xe6\x9b\xf9\xd4\x77\x6b\x39\x26\x95\xca\xae\x65\x56\x81\xcc\x28\x4c\x42\xe7\x12\xb2\x36\x87\x2d\x94\xdf\xa0\xbd\x96\x9f\x79\x1c\xb8\x9a\x94\x65\x5a\x12\xcc\xc3\xbb\x4d\x64\xe0\x33\xcb\xbe\xea\xc1\x9f\x7f\x88\x82\x91\xeb\x00\x55\x6b\xee\x85\x11\x9a\x41\xaf\x31\x5f\x32\xec\xab\xa4\xac\x33\x2c\x2b\x25\xc5\xe7\xee\x68\x78\x5a\xb0\x7a\xf7\xce\xaf\x1f\x61\xb9\x3d\x61\x53\x83\x58\x6e\x71\x3e\x33\x72\x36\xfd\x8e\xda\x70\x9b\x8f\xab\x0d\x9d\x9f\x2f\x49\x9e\x80\xe7\xfb\x14\x2f\x70\x94\x40\xfd\xae\xa6\xf7\x80\xa7\x1f\xbb\x4a\x77\x2f\xdc\x34\x61\xb1\x80\xcc\x93\xb0\xff\x43\xf3\x44\x35\x06\xb7\x28\xad\x1e\x95\xfe\xc2\x2d\xaa\x70\xaa\x26\x29\xdc\x88\x38\xca\x9f\xc0\x53\xd3\x17\x0f\xfa\x57\x49\xaf\x64\xd7\x96\x53\xe9\xf1\x94\x84\xc2\xf8\x0d\xe7\xc3\x45\x1b\x39\xa7\x06\xfd\x3c\x74\x3c\x5d\xfd\x6c\x75\xb7\x47\xba\xda\x79\x3c\xc2\xdb\xbb\x7e\x4a\xdb\xd3\x73\x71\xf1\xf5\x7c\x8e\x6e\x94\x60\x1d\xd1\x4c\xc2\x1d\x03\xd5\xcf\x60\xb1\x85\x1b\xcb\x5b\x2b\xdd\x3f\x7b\xdb\x47\x90\xa6\x79\x71\x14\x11\x2c\x1f\x4a\xb0\xc4\x00\x91\x1e\xac\x14\xfa\x9e\xb0\x3f\xe6\x51\xfd\x04\xff\x45\x21\xf6\x41\xcf\x3d\xd8\x8c\x4c\x58\xc3\x20\x96\x5a\x58\x01\x2c\xaf\x92\x81\x1b\x9d\x42\xec\xa9\x4f\xe9\xa8\x74\x89\xca\x65\xab\x53\xb7\x0f\xd7\xad\x5e\x0f\x6e\xd5\x30\xfa\x5f\x4b\x6c\x36\xf3\xf7\x85\x6f\xc1\x6c\x42\x67\x25\x71\x8a\x9f\x1e\x5c\xbd\x94\xe6\x42\x3b\x61\x20\x33\xfa\xbc\x09\x44\x07\xf9\x0d\xf5\xec\xef\x64\x79\x21\x87\x69\x74\xf0\x2a\xa3\x8f\xab\xc3\x75\x5e\x46\x8d\xcf\x78\xcf\xb5\xaf\x51\xa5\x44\x7e\xc1\xcd\x6b\xfb\x22\x8f\xaf\xaa\x66\xdb\x2d\x98\x68\xbf\x45\xa5\x83\xa7\xdb\xc8\x4d\x8b\x8f\xb2\x93\x4b\x68\x56\xc9\x72\x36\x82\x43\xc3\x2d\x6c\xa1\xdd\x07\x6a\xfc\x8f\xb9\x6c\x76\x11\xe3\x65\x49\x12\xc6\x22\xe3\x73\x11\x74\x55\xfd\xe2\x2e\x7b\xea\x1b\xe1\x67\x1d\xa6\x7d\x00\xc0\xff\x03\x00\x00\xff\xff\xfe\x5b\x02\x78\x6b\x0e\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 3691, mode: os.FileMode(420), modTime: time.Unix(1609921334, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
